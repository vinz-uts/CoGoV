function simulation_menu()

header = 'Dynamic Command Governor simulation menu';
labels = char(...
    ' 1) Canal simulation with one vehicle  (Static Ostacle Avoidance);', ...
    ' 2) Canal simulation with two vehicles (Anticollision & Ostacle Avoidance);', ...
    ' 3) Canal simulation with two opposite vehicles  (Anticollision & Ostacle Avoidance);', ...
    ' 4) Two veicles simple anticollision  (Anticollision);', ...
    ' 5) Oil stain 1  (Anticollision, Path Following);', ...
    ' 6) Oil stain 2  (Anticollision, Path Following);', ...
    ' 7) Swarm Connection Smaller to Larger Circumference (Proximity);',...
    ' 8) Deployment scenario (Vehicle already in a plug in operation);',...
    ' 9) Parent Change Scenario (Anticollision, Spanning Tree, Data exchange);',...
    ' 10) Pentagon Swarm Scenario (Anticollision, Spanning Tree, CA);',...
    ' 11) Double Range Communication Scenario (Double range Anticollisio, Spanning Tree, Data exchange);',...
    ' 12) Hard plug in Scenario (Possible collision neighbors, Plug in);',...
    ' 13) Circular and Triangle Scenario (Plug in, Anticollision);'...
    );

filenames = char(...
    'canal\main_canal', ...
    'canal\main_canal_multi',...
    'canal\main_canal_multi_reverse',...
    'collision\main_collision',...
    'collision\main_oil',...
    'collision\main_oil_inf',...
    'communication\swarm_connection',...
    'communication\swarm_communication',...
    'communication\swarm_dynamic_connection_circular',...
    'communication\swarm_pentagon_CA',...
    'communication\swarm_double_range_communication',...
    'plug and play\formation_pnp',...
    'plug and play\main_final_sim'...
    );

Noptions = length(filenames(:, 1));

dependencies  = char(...
    '../../../marine_vehicle', ...
    '../../omni_vehicle_2DOF',...
    '../../../util',...
    '../../../CG',...
    '../../../tbxmanager'...
    );

pathCell = regexp(path, pathsep, 'split');
for i = 1:length(dependencies(:, 1))
    if(any(strcmpi(filenames(i, :), pathCell)))
        if(i == 3 || i == 5)
            addpath(genpath(dependencies(i, :)));
        else
            addpath(dependencies(i, :));
        end
    end
end

path_to_file = erase(matlab.desktop.editor.getActiveFilename, 'simulation_menu.m');
% addpath(genpath(path_to_file));

user_choice = 1;
while ~isempty(user_choice)
    clc
    disp(header)
    disp('  ')
    disp(labels)
    disp('  ')
    user_choice = input(['Enter your choice 1, 2,..., ' num2str(Noptions-1),', ' ...
        num2str(Noptions) ' or type enter key to exit.\n -> ']);
    if ~isempty(user_choice)
        clc
        user_choice = round(user_choice);
        if((user_choice > 0) && (user_choice <= Noptions))
            file_path = strcat(path_to_file, filenames(user_choice,:));
            disp('Simulation will now start.');
            disp('##############################################');
            run(file_path)
            disp('Simulation endend');
            break;
        else
            warning('Wrong choice made. Please enter a number between %d and %d.\n', 1, Noptions);
            pause(3);
        end
    else
        disp('Exit procedure requested.');
        break;
    end % if r
end % while

end